import requests
import urllib.request
import numpy as np
import pandas as pd

#US Oil Production in 1000 barrels per day
url2 = 'https://www.eia.gov/dnav/pet/hist_xls/WCRFPUS2w.xls'
r2 = requests.get(url2)
data_xls = pd.read_excel(url2, 'Data 1', skiprows = 2, comment='#') 
data_xls.columns = ['Date','Production of Crude Oil']
Oil_Production = data_xls

#Oil Prices
url3 = 'https://datahub.io/core/oil-prices/r/wti-daily.csv'
response = urllib.request.urlopen(url3)
data = response.read()      
text = data.decode('utf-8')

lines = text.splitlines()
Date = []
Price = []
for line in lines:
    line2 =  line.split(',')
    Date.append(line2[0])
    Price.append(line2[1])
      

Date.pop(0)
Price.pop(0)

#Merge Datasets
#Delete dates which do not appear on the other

Prices = pd.DataFrame(np.zeros([len(Date),2]),columns=['Date','Price'])
new_df1 = pd.DataFrame({'Date': Date})
Prices.update(new_df1)
new_df2 = pd.DataFrame({'Price': Price})
Prices.update(new_df2)


Prices['Date'] =  pd.to_datetime(Prices['Date'])
merged_df = Oil_Production.merge(Prices, how = 'inner', on = ['Date'])


x = merged_df.drop(columns="Price")
x = x.drop(columns="Date")
y = merged_df.drop(columns="Date")
y = y.drop(columns="Production of Crude Oil")



#Boosted Decision Tree
X_train,X_test,y_train,y_test = train_test_split(x,y)#split data into testing and training sets
#Could also use everything here as the training
regressor = GradientBoostingRegressor( 
    max_depth = 2, #no. leaves on each tree
    n_estimators = 3, #total no. tress in ensemble
    learning_rate = 1.0 #scales contribution of each tree
)

regressor.fit(X_train, y_train)
errors = [mean_squared_error(y_test,y_pred) for y_pred in
         regressor.staged_predict(X_test)]
best_n_estimators = np.argmin(errors) #finds optimal number of trees by measuring validation error at each stage of training

best_regressor = GradientBoostingRegressor( #build and fit model using optimal number of trees
        max_depth = 2,
        n_estimators = best_n_estimators,
        learning_rate = 0.1
)

best_regressor.fit(X_train,y_train) #Train the model

y_pred = best_regressor.predict(X_test) #Predict price based on test values
err = mean_absolute_error(y_test,y_pred) #average distance from predictions and absolute values
print(err)

x = np.array([[9000], #Some test values for oil production data
             [7000],
             [2000]])
y_pred = best_regressor.predict(x)
print(y_pred) #My predictions
